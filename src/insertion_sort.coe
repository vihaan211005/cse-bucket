// Insertion sort implementation for MIPS-like instruction set
memory_initialization_radix = 2;
memory_initialization_vector = 
00100000000000010000000000000000, // addi $1, $0, 0   ; Initialize memory address pointer
00100000000000100000000000000101, // addi $2, $0, 5   ; Array size = 5
00100000000001010000000000000101, // addi $5, $0, 5   ; Initialize array[0] = 5
10101100001001010000000000000000, // sw $5, 0($1)     ; Store array[0]
00100000001000010000000000000100, // addi $1, $1, 4   ; Move to next memory location
00100000000001010000000000000010, // addi $5, $0, 2   ; Initialize array[1] = 2
10101100001001010000000000000000, // sw $5, 0($1)     ; Store array[1]
00100000001000010000000000000100, // addi $1, $1, 4   ; Move to next memory location
00100000000001010000000000000100, // addi $5, $0, 4   ; Initialize array[2] = 4
10101100001001010000000000000000, // sw $5, 0($1)     ; Store array[2]
00100000001000010000000000000100, // addi $1, $1, 4   ; Move to next memory location
00100000000001010000000000000001, // addi $5, $0, 1   ; Initialize array[3] = 1
10101100001001010000000000000000, // sw $5, 0($1)     ; Store array[3]
00100000001000010000000000000100, // addi $1, $1, 4   ; Move to next memory location
00100000000001010000000000000011, // addi $5, $0, 3   ; Initialize array[4] = 3
10101100001001010000000000000000, // sw $5, 0($1)     ; Store array[4]

// Reset address pointer to beginning of array
00100000000000010000000000000000, // addi $1, $0, 0   ; Reset address pointer

// Outer loop initialization (i = 1)
00100000000000110000000000000001, // addi $3, $0, 1   ; i = 1

// Outer loop condition
00010000011000100000000000011001, // beq $3, $2, end_sort ; if i == array_size, exit sort

// Inner loop initialization
00000000011000000010000000000000, // add $4, $3, $0   ; j = i
00100000000001010000000000000000, // addi $5, $0, 0   ; Initialize temp register for calculations

// Calculate address for A[j]
00100000100001100000000000000000, // addi $6, $4, 0   ; Copy j to temp register
00000000110000000110000000000000, // sll $6, $6, 2    ; Multiply by 4 (word-aligned)
10001100110001110000000000000000, // lw $7, 0($6)     ; Load A[j]

// Calculate address for A[j-1]
00100000100011000000000000000001, // addi $24, $4, -1 ; j-1
00000011000000001100000000000000, // sll $24, $24, 2  ; Multiply by 4 (word-aligned)
10001111000110010000000000000000, // lw $25, 0($24)   ; Load A[j-1]

// Inner loop condition
00010000100000000000000000001101, // beq $4, $0, inner_loop_end ; if j == 0, exit inner loop
00000011001001111101000000101010, // slt $10, $25, $7 ; if A[j-1] < A[j], set $10 = 1
00010001010000000000000000001101, // beq $10, $0, inner_loop_end ; if $10 == 0, exit inner loop

// Swap A[j] and A[j-1]
10101111000001110000000000000000, // sw $7, 0($24)    ; Store A[j] at address of A[j-1]
10101100110110010000000000000000, // sw $25, 0($6)    ; Store A[j-1] at address of A[j]

// Decrement j and repeat inner loop
00100000100001000000000000000001, // addi $4, $4, -1   ; j = j - 1
00001000000000000000000000010001, // j inner_loop      ; Jump to inner_loop

// Inner loop end
// Increment i and repeat outer loop
00100000011000110000000000000001, // addi $3, $3, 1    ; i = i + 1
00001000000000000000000000001101, // j outer_loop      ; Jump to outer_loop

// End sort
// Reset address pointer to beginning of array to verify results
00100000000000010000000000000000; // addi $1, $0, 0    ; Reset address pointer
